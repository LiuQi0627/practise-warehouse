spring:
  application:
    name: order-system
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.2.100:8848
        username: nacos
        password: nacos
  # 单库
#  datasource:
#    type: com.alibaba.druid.pool.DruidDataSource
#    druid:
#      driver-class-name: com.mysql.cj.jdbc.Driver
#      url: jdbc:mysql://192.168.2.100:3306/messi_order_system?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
#      username: root
#      password: 123456

  # 分库分表
  shardingsphere:
    datasource:
      names: ds0,ds1,ds2,ds3
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.2.110:3306/messi_order_system_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: 123456

      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.2.111:3306/messi_order_system_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: 123456

      ds2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.2.112:3306/messi_order_system_2?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: 123456

      ds3:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.2.113:3306/messi_order_system_3?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: 123456

    # 不需要分库分表的表，路由到默认的数据源
    sharding:
      default-data-source-name: ds0

      # 默认的分库策略
      default-database-strategy:
        # 使用标准的分库策略
        standard:
          # 指定作为路由分片键的字段
          sharding-column: order_id
          # 指定分片逻辑
          precise-algorithm-class-name: com.messi.system.order.sharding.DatabasePreciseShardingAlgorithm

      # SQL中带order_id字段的标准分片策略
      tables:
        # 指定分表的数据表，每个库8张表，4个库共32张表
        order_price_details:
          actual-data-nodes: ds$->{0..3}.order_price_details_$->{0..7}
          table-strategy:
            standard:
              # 指定作为路由分片键的字段
              sharding-column: order_id
              # 自定义策略
              precise-algorithm-class-name: com.messi.system.order.sharding.TablePreciseShardingAlgorithm

        order_item_info:
          actual-data-nodes: ds$->{0..3}.order_item_info_$->{0..7}
          table-strategy:
            standard:
              # 指定作为路由分片键的字段
              sharding-column: order_id
              # 自定义策略
              precise-algorithm-class-name: com.messi.system.order.sharding.TablePreciseShardingAlgorithm

        # SQL中没有order_id字段的复合分片策略
        # 对于order_info表，在常规查询时使用order_id做路由键
        # 如果是查询分页，因为在业务中，order_id的最后三位是userId，所以这里用user_id做路由也可以
        order_info:
          actual-data-nodes: ds$->{0..3}.order_info_$->{0..7}
          database-strategy:
            complex:
              sharding-columns: order_id,user_id
              algorithm-class-name: com.messi.system.order.sharding.DatabaseComplexKeysShardingAlgorithm
          table-strategy:
            complex:
              sharding-columns: order_id,user_id
              algorithm-class-name: com.messi.system.order.sharding.TableComplexKeysShardingAlgorithm

      # 绑定表
      # 给需要联表查询的数据表做绑定，避免出现笛卡尔积关联
      binding-tables:
        - order_info,order_item_info,order_price_details

    # 自定义分库分表参数
    sub:
      database:
        number: 4
      table:
        number: 8

    # 打印执行的数据库以及语句
    props:
      sql:
        show: true

  redis:
    host: 192.168.2.100
    port: 6379
    password: 123456

server:
  port: 8084

dubbo:
  scan:
    # 指定扫描的位置
    base-packages: com.messi.system.order.api
  registry:
    address: spring-cloud://localhost
  protocol:
    name: dubbo
    port: 28084
  consumer:
    check: false
    # 订阅指定的服务
  cloud:
    subscribed-services: user-system,product-system,market-system

mybatis-plus:
  configuration:
    # 开启控制台打印SQL
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 开启驼峰命名转换
    map-underscore-to-camel-case: true
    # 指定mapper.xml在resources目录的位置
  mapper-locations: classpath:mapper/*.xml

#seata配置
seata:
  tx-service-group: tx-order-group
  service:
    grouplist:
      order-seata: 192.168.2.100:8091
    vgroup-mapping:
      tx-order-group: order-seata

rocketmq:
  name-server: 192.168.2.100:9876

#xxljob
xxl:
  job:
    admin:
      address: http://192.168.2.100:8079/xxl-job-admin
    executor:
      name: order-system-xxl-job

#elasticsearch配置
elasticsearch:
  node: 192.168.2.100:9300
  shards-number: 1
  replicas-number: 1
  request-max-return-number: 10000
